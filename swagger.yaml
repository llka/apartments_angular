swagger: '2.0'
info:
  description: >-
    Rest Api to manage and book apartments, developed with Spring (Boot, MVC,
    Security, JPA) , Angular 5, Oracle, Hibernate
  version: API TOS
  title: Apartments Booking REST API
  termsOfService: Terms of service
  contact:
    name: Ilya Kisel
    url: 'https://github.com/llka'
    email: ilya_kisel@epam.com
  license:
    name: License of API
    url: 'https://github.com/llka'
host: 'localhost:8099'
basePath: /
tags:
  - name: apartment-controller
    description: Apartment Controller
  - name: booking-controller
    description: Booking Controller
  - name: login-controller
    description: Login Controller
  - name: user-controller
    description: User Controller
  - name: registration-controller
    description: Registration Controller
paths:
  /apartment:
    get:
      tags:
        - apartment-controller
      summary: getAllApartments
      operationId: getAllApartmentsUsingGET
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - name: minCost
          in: query
          description: minCost
          required: false
          type: integer
          default: -1
          format: int32
        - name: maxCost
          in: query
          description: maxCost
          required: false
          type: integer
          default: -1
          format: int32
      responses:
        '200':
          description: OK
          schema:
            type: array
            items:
              $ref: '#/definitions/Apartment'
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
    post:
      tags:
        - apartment-controller
      summary: saveApartment
      operationId: saveApartmentUsingPOST
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - in: body
          name: apartment
          description: apartment
          required: true
          schema:
            $ref: '#/definitions/Apartment'
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/Apartment'
        '201':
          description: Created
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
    put:
      tags:
        - apartment-controller
      summary: updateApartment
      operationId: updateApartmentUsingPUT
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - in: body
          name: apartment
          description: apartment
          required: true
          schema:
            $ref: '#/definitions/Apartment'
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/Apartment'
        '201':
          description: Created
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
    delete:
      tags:
        - apartment-controller
      summary: deleteAllApartments
      operationId: deleteAllApartmentsUsingDELETE
      consumes:
        - application/json
      produces:
        - '*/*'
      responses:
        '200':
          description: OK
        '204':
          description: No Content
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
  '/apartment/{id}':
    get:
      tags:
        - apartment-controller
      summary: getApartmentById
      operationId: getApartmentByIdUsingGET
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - name: id
          in: path
          description: id
          required: true
          type: integer
          format: int32
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/Apartment'
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
    delete:
      tags:
        - apartment-controller
      summary: deleteApartment
      operationId: deleteApartmentUsingDELETE
      consumes:
        - application/json
      produces:
        - '*/*'
      parameters:
        - name: id
          in: path
          description: id
          required: true
          type: integer
          format: int32
      responses:
        '200':
          description: OK
        '204':
          description: No Content
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
  '/apartment/{id}/users':
    get:
      tags:
        - apartment-controller
      summary: getApartmentUsers
      operationId: getApartmentUsersUsingGET
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - name: id
          in: path
          description: id
          required: true
          type: integer
          format: int32
      responses:
        '200':
          description: OK
          schema:
            type: array
            items:
              $ref: '#/definitions/User'
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
  /hotel:
    get:
      tags:
        - booking-controller
      summary: getBookingInfo
      operationId: getBookingInfoUsingGET
      consumes:
        - application/json
      produces:
        - application/json
      responses:
        '200':
          description: OK
          schema:
            type: array
            items:
              type: array
              items:
                type: object
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
    post:
      tags:
        - booking-controller
      summary: bookApartments
      operationId: bookApartmentsUsingPOST
      consumes:
        - application/json
      produces:
        - '*/*'
      parameters:
        - name: userId
          in: query
          description: userId
          required: true
          type: integer
          format: int32
        - in: body
          name: apartments
          description: apartments
          required: true
          schema:
            type: array
            items:
              $ref: '#/definitions/Apartment'
      responses:
        '200':
          description: OK
        '201':
          description: Created
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
    delete:
      tags:
        - booking-controller
      summary: freeApartment
      operationId: freeApartmentUsingDELETE_1
      consumes:
        - application/json
      produces:
        - '*/*'
      parameters:
        - name: userId
          in: query
          description: userId
          required: true
          type: integer
          format: int32
        - in: body
          name: apartment
          description: apartment
          required: true
          schema:
            $ref: '#/definitions/Apartment'
      responses:
        '200':
          description: OK
        '204':
          description: No Content
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
  /login:
    get:
      tags:
        - login-controller
      summary: loginResult
      operationId: loginResultUsingGET
      consumes:
        - application/json
      produces:
        - '*/*'
      parameters:
        - name: error
          in: query
          description: error
          required: false
          type: string
        - name: logout
          in: query
          description: logout
          required: false
          type: string
        - name: access
          in: query
          description: access
          required: false
          type: string
        - name: ban
          in: query
          description: ban
          required: false
          type: string
      responses:
        '200':
          description: OK
          schema:
            type: string
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
  /register:
    post:
      tags:
        - registration-controller
      summary: register
      operationId: registerUsingPOST
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - in: body
          name: user
          description: user
          required: true
          schema:
            $ref: '#/definitions/User'
      responses:
        '200':
          description: OK
        '201':
          description: Created
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
  /user:
    get:
      tags:
        - user-controller
      summary: getAllUsers
      operationId: getAllUsersUsingGET
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - name: ban
          in: query
          description: ban
          required: false
          type: boolean
      responses:
        '200':
          description: OK
          schema:
            type: array
            items:
              $ref: '#/definitions/User'
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
    post:
      tags:
        - user-controller
      summary: createUser
      operationId: createUserUsingPOST
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - in: body
          name: user
          description: user
          required: true
          schema:
            $ref: '#/definitions/User'
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/User'
        '201':
          description: Created
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
    put:
      tags:
        - user-controller
      summary: updateUser
      operationId: updateUserUsingPUT
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - in: body
          name: user
          description: user
          required: true
          schema:
            $ref: '#/definitions/User'
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/User'
        '201':
          description: Created
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
    delete:
      tags:
        - user-controller
      summary: deleteAllUsers
      operationId: deleteAllUsersUsingDELETE
      consumes:
        - application/json
      produces:
        - '*/*'
      responses:
        '200':
          description: OK
        '204':
          description: No Content
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
  '/user/{id}':
    get:
      tags:
        - user-controller
      summary: getUser
      operationId: getUserUsingGET
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - name: id
          in: path
          description: id
          required: true
          type: integer
          format: int32
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/User'
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
    delete:
      tags:
        - user-controller
      summary: deleteUser
      operationId: deleteUserUsingDELETE
      consumes:
        - application/json
      produces:
        - '*/*'
      parameters:
        - name: id
          in: path
          description: id
          required: true
          type: integer
          format: int32
      responses:
        '200':
          description: OK
        '204':
          description: No Content
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
  '/user/{id}/apartments':
    get:
      tags:
        - user-controller
      summary: getUserApartments
      operationId: getUserApartmentsUsingGET
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - name: id
          in: path
          description: id
          required: true
          type: integer
          format: int32
      responses:
        '200':
          description: OK
          schema:
            type: array
            items:
              $ref: '#/definitions/Apartment'
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
definitions:
  Apartment:
    type: object
    properties:
      apartmentId:
        type: integer
        format: int32
      bookedFrom:
        $ref: '#/definitions/Timestamp'
      bookedTo:
        $ref: '#/definitions/Timestamp'
      cost:
        type: integer
        format: int32
  Timestamp:
    type: object
    properties:
      date:
        type: integer
        format: int32
      day:
        type: integer
        format: int32
      hours:
        type: integer
        format: int32
      minutes:
        type: integer
        format: int32
      month:
        type: integer
        format: int32
      nanos:
        type: integer
        format: int32
      seconds:
        type: integer
        format: int32
      time:
        type: integer
        format: int64
      timezoneOffset:
        type: integer
        format: int32
      year:
        type: integer
        format: int32
  User:
    type: object
    properties:
      ban:
        type: boolean
      id:
        type: integer
        format: int32
      login:
        type: string
      password:
        type: string
      role:
        type: string
        enum:
          - ADMIN
          - USER
          - GUEST
